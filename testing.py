import streamlit as st
import ollama
from pptx import Presentation
from pptx.util import Pt
from pptx.dml.color import RGBColor
from pptx.enum.text import PP_ALIGN
from io import BytesIO
import re

# Function to create a PowerPoint file
def create_ppt(content, title="PyLearn Pro"):
    ppt = Presentation()
    title_slide_layout = ppt.slide_layouts[0]
    content_slide_layout = ppt.slide_layouts[1]

    # Add title slide
    slide = ppt.slides.add_slide(title_slide_layout)
    slide.shapes.title.text = title
    slide.placeholders[1].text = "Generated by PyLearn Pro"

    # Function to add content to a slide
    def add_content_slide(ppt, slide_content, slide_title="Details"):
        slide = ppt.slides.add_slide(content_slide_layout)
        slide.shapes.title.text = slide_title
        text_box = slide.placeholders[1]
        text_frame = text_box.text_frame
        text_frame.clear()  # Clear any default content

        # Format paragraphs with font size, color, and alignment
        for paragraph in slide_content.split("\n"):
            p = text_frame.add_paragraph()
            p.text = paragraph.strip()
            p.font.size = Pt(18)  # Set font size to 18pt
            p.alignment = PP_ALIGN.LEFT

            # Set font color: Red for code, Black for normal text
            if paragraph.startswith("    "):  # Code lines are indented
                p.font.color.rgb = RGBColor(255, 0, 0)  # Red for code
            else:
                p.font.color.rgb = RGBColor(0, 0, 0)  # Black for normal text

            # Apply bold formatting to titles
            if slide_title.lower() == 'details':
                p.font.bold = False  # Ensure it's not bold for normal content
            else:
                p.font.bold = True  # Set titles in bold

    # Remove code block delimiters and process content
    cleaned_content = []
    is_code_block = False

    for line in content.splitlines():
        if re.match(r"^```", line.strip()):
            is_code_block = not is_code_block
            continue  # Skip code block markers
        cleaned_content.append(line if not is_code_block else f"    {line}")  # Indent code lines

    # Chunk content into slides
    chunk = ""
    max_lines_per_slide = 12  # Adjust for font size and layout
    for line in cleaned_content:
        chunk += f"{line}\n"

        if len(chunk.splitlines()) >= max_lines_per_slide:
            add_content_slide(ppt, chunk.strip())
            chunk = ""

    # Add any remaining content
    if chunk.strip():
        add_content_slide(ppt, chunk.strip())

    # Save to a BytesIO object
    ppt_file = BytesIO()
    ppt.save(ppt_file)
    ppt_file.seek(0)
    return ppt_file


# Function to display content with syntax highlighting for code blocks
def display_content_with_code_highlight(content):
    """Process and display the content, ensuring code blocks are highlighted."""
    lines = content.splitlines()
    in_code_block = False
    code_block = []

    for line in lines:
        if line.strip().startswith("```"):
            in_code_block = not in_code_block
            if not in_code_block and code_block:
                st.code("\n".join(code_block), language="python")
                code_block = []
            continue

        if in_code_block:
            code_block.append(line)
        else:
            st.write(line)


# App Title
st.title("Learn Python with AI - PyLearn Pro")

# Always visible sidebar for Main Topics and Subtopics
st.sidebar.title("Python Topics")
topics = {
    "Basics": [
        "Variables", "Data Types", "Loops", "File Handling", "Regex", "Input/Output", "Control Flow"
    ],
    "Data Structures": [
        "Lists", "Tuples", "Dictionaries", "Sets"
    ],
    "Object-Oriented Programming": [
        "Classes", "Inheritance", "Polymorphism"
    ],
    "Advanced Topics": [
        "Generators", "Decorators", "Context Managers"
    ],
    "Libraries": [
        "NumPy", "Pandas", "Matplotlib", "Seaborn", "Scikit-Learn"
    ],
    "SQL & MySQL for Python": [
        "Basic SQL Queries", "SELECT Statement", "WHERE Clause", "JOIN Operations", "GROUP BY and Aggregation", 
        "Subqueries", "Transactions", "Indexes", "Stored Procedures", "MySQL with Python (using MySQL Connector)"
    ],
    "Data Science & Machine Learning": [
        "Data Preprocessing", "Exploratory Data Analysis (EDA)", "Supervised Learning", "Unsupervised Learning", 
        "Regression Models", "Classification Models", "Clustering Algorithms", "Evaluation Metrics", 
        "Neural Networks", "Deep Learning with TensorFlow/Keras"
    ],
    "Big Data & Cloud": [
        "Hadoop", "Spark with PySpark", "Data Lakes", "AWS", "Google Cloud", "Azure", "ETL Pipelines"
    ],
    "DevOps & Automation": [
        "Docker", "CI/CD Pipelines", "Version Control with Git", "Python for Automation", "Cloud Deployment"
    ],
    "Web Development with Python": [
        "Flask", "Django", "REST APIs", "Web Scraping with BeautifulSoup", "Selenium"
    ]
}

selected_topic = st.sidebar.selectbox("Select a Topic", list(topics.keys()))
subtopics = topics[selected_topic]
selected_subtopic = st.sidebar.radio(f"{selected_topic} Subtopics", subtopics)

# Display Topic Explanation
st.header(f"{selected_topic} - {selected_subtopic}")

if st.button(f"Explain {selected_subtopic}"):
    with st.spinner("Analyzing..."):
        prompt = f"Explain {selected_subtopic} in Python with examples."
        explanation_placeholder = st.empty()
        explanation_text = ""

        # Stream the response
        response = ollama.generate(model="llama3.2", prompt=prompt, stream=True)
        for part in response:
            explanation_text += part['response']
            explanation_placeholder.text(explanation_text)

        # Display content with code block highlighting
        display_content_with_code_highlight(explanation_text)

        # Save explanation in session state for download options
        st.session_state.explanation = explanation_text

    if st.session_state.explanation:
        st.download_button(
            label="Download Explanation as PowerPoint",
            data=create_ppt(st.session_state.explanation, title=f"{selected_topic} - {selected_subtopic}"),
            file_name=f"{selected_subtopic}_explanation.pptx",
            mime="application/vnd.openxmlformats-officedocument.presentationml.presentation",
        )

# AI-Powered Mentor Section
st.subheader("Ask Python Questions")
user_query = st.text_input("Type your Python-related question here:")

if st.button("Get Answer"):
    if user_query:
        with st.spinner("Thinking..."):
            answer_placeholder = st.empty()
            answer_text = ""

            # Stream the response
            response = ollama.generate(model="llama3.2", prompt=user_query, stream=True)
            for part in response:
                answer_text += part['response']
                answer_placeholder.text(answer_text)

            # Display content with code block highlighting
            display_content_with_code_highlight(answer_text)

            # Save answer in session state for download options
            st.session_state.answer = answer_text

        if st.session_state.answer:
            st.download_button(
                label="Download Answer as PowerPoint",
                data=create_ppt(st.session_state.answer, title="Python Q&A"),
                file_name="python_answer.pptx",
                mime="application/vnd.openxmlformats-officedocument.presentationml.presentation",
            )
